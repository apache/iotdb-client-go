// Code generated by Thrift Compiler (0.14.1). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"github.com/apache/thrift/lib/go/thrift"
	"rpc"
)

var _ = rpc.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  TSOpenSessionResp openSession(TSOpenSessionReq req)")
  fmt.Fprintln(os.Stderr, "  TSStatus closeSession(TSCloseSessionReq req)")
  fmt.Fprintln(os.Stderr, "  TSExecuteStatementResp executeStatement(TSExecuteStatementReq req)")
  fmt.Fprintln(os.Stderr, "  TSStatus executeBatchStatement(TSExecuteBatchStatementReq req)")
  fmt.Fprintln(os.Stderr, "  TSExecuteStatementResp executeQueryStatement(TSExecuteStatementReq req)")
  fmt.Fprintln(os.Stderr, "  TSExecuteStatementResp executeUpdateStatement(TSExecuteStatementReq req)")
  fmt.Fprintln(os.Stderr, "  TSFetchResultsResp fetchResults(TSFetchResultsReq req)")
  fmt.Fprintln(os.Stderr, "  TSFetchMetadataResp fetchMetadata(TSFetchMetadataReq req)")
  fmt.Fprintln(os.Stderr, "  TSStatus cancelOperation(TSCancelOperationReq req)")
  fmt.Fprintln(os.Stderr, "  TSStatus closeOperation(TSCloseOperationReq req)")
  fmt.Fprintln(os.Stderr, "  TSGetTimeZoneResp getTimeZone(i64 sessionId)")
  fmt.Fprintln(os.Stderr, "  TSStatus setTimeZone(TSSetTimeZoneReq req)")
  fmt.Fprintln(os.Stderr, "  ServerProperties getProperties()")
  fmt.Fprintln(os.Stderr, "  TSStatus setStorageGroup(i64 sessionId, string storageGroup)")
  fmt.Fprintln(os.Stderr, "  TSStatus createTimeseries(TSCreateTimeseriesReq req)")
  fmt.Fprintln(os.Stderr, "  TSStatus createAlignedTimeseries(TSCreateAlignedTimeseriesReq req)")
  fmt.Fprintln(os.Stderr, "  TSStatus createMultiTimeseries(TSCreateMultiTimeseriesReq req)")
  fmt.Fprintln(os.Stderr, "  TSStatus deleteTimeseries(i64 sessionId,  path)")
  fmt.Fprintln(os.Stderr, "  TSStatus deleteStorageGroups(i64 sessionId,  storageGroup)")
  fmt.Fprintln(os.Stderr, "  TSStatus insertRecord(TSInsertRecordReq req)")
  fmt.Fprintln(os.Stderr, "  TSStatus insertStringRecord(TSInsertStringRecordReq req)")
  fmt.Fprintln(os.Stderr, "  TSStatus insertTablet(TSInsertTabletReq req)")
  fmt.Fprintln(os.Stderr, "  TSStatus insertTablets(TSInsertTabletsReq req)")
  fmt.Fprintln(os.Stderr, "  TSStatus insertRecords(TSInsertRecordsReq req)")
  fmt.Fprintln(os.Stderr, "  TSStatus insertRecordsOfOneDevice(TSInsertRecordsOfOneDeviceReq req)")
  fmt.Fprintln(os.Stderr, "  TSStatus insertStringRecordsOfOneDevice(TSInsertStringRecordsOfOneDeviceReq req)")
  fmt.Fprintln(os.Stderr, "  TSStatus insertStringRecords(TSInsertStringRecordsReq req)")
  fmt.Fprintln(os.Stderr, "  TSStatus testInsertTablet(TSInsertTabletReq req)")
  fmt.Fprintln(os.Stderr, "  TSStatus testInsertTablets(TSInsertTabletsReq req)")
  fmt.Fprintln(os.Stderr, "  TSStatus testInsertRecord(TSInsertRecordReq req)")
  fmt.Fprintln(os.Stderr, "  TSStatus testInsertStringRecord(TSInsertStringRecordReq req)")
  fmt.Fprintln(os.Stderr, "  TSStatus testInsertRecords(TSInsertRecordsReq req)")
  fmt.Fprintln(os.Stderr, "  TSStatus testInsertRecordsOfOneDevice(TSInsertRecordsOfOneDeviceReq req)")
  fmt.Fprintln(os.Stderr, "  TSStatus testInsertStringRecords(TSInsertStringRecordsReq req)")
  fmt.Fprintln(os.Stderr, "  TSStatus deleteData(TSDeleteDataReq req)")
  fmt.Fprintln(os.Stderr, "  TSExecuteStatementResp executeRawDataQuery(TSRawDataQueryReq req)")
  fmt.Fprintln(os.Stderr, "  TSExecuteStatementResp executeLastDataQuery(TSLastDataQueryReq req)")
  fmt.Fprintln(os.Stderr, "  i64 requestStatementId(i64 sessionId)")
  fmt.Fprintln(os.Stderr, "  TSStatus createSchemaTemplate(TSCreateSchemaTemplateReq req)")
  fmt.Fprintln(os.Stderr, "  TSStatus appendSchemaTemplate(TSAppendSchemaTemplateReq req)")
  fmt.Fprintln(os.Stderr, "  TSStatus pruneSchemaTemplate(TSPruneSchemaTemplateReq req)")
  fmt.Fprintln(os.Stderr, "  TSQueryTemplateResp querySchemaTemplate(TSQueryTemplateReq req)")
  fmt.Fprintln(os.Stderr, "  TSStatus setSchemaTemplate(TSSetSchemaTemplateReq req)")
  fmt.Fprintln(os.Stderr, "  TSStatus unsetSchemaTemplate(TSUnsetSchemaTemplateReq req)")
  fmt.Fprintln(os.Stderr, "  TSStatus setUsingTemplate(TSSetUsingTemplateReq req)")
  fmt.Fprintln(os.Stderr, "  TSStatus unsetUsingTemplate(i64 sessionId, string templateName, string prefixPath)")
  fmt.Fprintln(os.Stderr, "  TSStatus dropSchemaTemplate(TSDropSchemaTemplateReq req)")
  fmt.Fprintln(os.Stderr, "  TSStatus executeOperationSync(TSOperationSyncWriteReq req)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := rpc.NewTSIServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "openSession":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "OpenSession requires 1 args")
      flag.Usage()
    }
    arg311 := flag.Arg(1)
    mbTrans312 := thrift.NewTMemoryBufferLen(len(arg311))
    defer mbTrans312.Close()
    _, err313 := mbTrans312.WriteString(arg311)
    if err313 != nil {
      Usage()
      return
    }
    factory314 := thrift.NewTJSONProtocolFactory()
    jsProt315 := factory314.GetProtocol(mbTrans312)
    argvalue0 := rpc.NewTSOpenSessionReq()
    err316 := argvalue0.Read(context.Background(), jsProt315)
    if err316 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.OpenSession(context.Background(), value0))
    fmt.Print("\n")
    break
  case "closeSession":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CloseSession requires 1 args")
      flag.Usage()
    }
    arg317 := flag.Arg(1)
    mbTrans318 := thrift.NewTMemoryBufferLen(len(arg317))
    defer mbTrans318.Close()
    _, err319 := mbTrans318.WriteString(arg317)
    if err319 != nil {
      Usage()
      return
    }
    factory320 := thrift.NewTJSONProtocolFactory()
    jsProt321 := factory320.GetProtocol(mbTrans318)
    argvalue0 := rpc.NewTSCloseSessionReq()
    err322 := argvalue0.Read(context.Background(), jsProt321)
    if err322 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CloseSession(context.Background(), value0))
    fmt.Print("\n")
    break
  case "executeStatement":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ExecuteStatement requires 1 args")
      flag.Usage()
    }
    arg323 := flag.Arg(1)
    mbTrans324 := thrift.NewTMemoryBufferLen(len(arg323))
    defer mbTrans324.Close()
    _, err325 := mbTrans324.WriteString(arg323)
    if err325 != nil {
      Usage()
      return
    }
    factory326 := thrift.NewTJSONProtocolFactory()
    jsProt327 := factory326.GetProtocol(mbTrans324)
    argvalue0 := rpc.NewTSExecuteStatementReq()
    err328 := argvalue0.Read(context.Background(), jsProt327)
    if err328 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ExecuteStatement(context.Background(), value0))
    fmt.Print("\n")
    break
  case "executeBatchStatement":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ExecuteBatchStatement requires 1 args")
      flag.Usage()
    }
    arg329 := flag.Arg(1)
    mbTrans330 := thrift.NewTMemoryBufferLen(len(arg329))
    defer mbTrans330.Close()
    _, err331 := mbTrans330.WriteString(arg329)
    if err331 != nil {
      Usage()
      return
    }
    factory332 := thrift.NewTJSONProtocolFactory()
    jsProt333 := factory332.GetProtocol(mbTrans330)
    argvalue0 := rpc.NewTSExecuteBatchStatementReq()
    err334 := argvalue0.Read(context.Background(), jsProt333)
    if err334 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ExecuteBatchStatement(context.Background(), value0))
    fmt.Print("\n")
    break
  case "executeQueryStatement":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ExecuteQueryStatement requires 1 args")
      flag.Usage()
    }
    arg335 := flag.Arg(1)
    mbTrans336 := thrift.NewTMemoryBufferLen(len(arg335))
    defer mbTrans336.Close()
    _, err337 := mbTrans336.WriteString(arg335)
    if err337 != nil {
      Usage()
      return
    }
    factory338 := thrift.NewTJSONProtocolFactory()
    jsProt339 := factory338.GetProtocol(mbTrans336)
    argvalue0 := rpc.NewTSExecuteStatementReq()
    err340 := argvalue0.Read(context.Background(), jsProt339)
    if err340 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ExecuteQueryStatement(context.Background(), value0))
    fmt.Print("\n")
    break
  case "executeUpdateStatement":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ExecuteUpdateStatement requires 1 args")
      flag.Usage()
    }
    arg341 := flag.Arg(1)
    mbTrans342 := thrift.NewTMemoryBufferLen(len(arg341))
    defer mbTrans342.Close()
    _, err343 := mbTrans342.WriteString(arg341)
    if err343 != nil {
      Usage()
      return
    }
    factory344 := thrift.NewTJSONProtocolFactory()
    jsProt345 := factory344.GetProtocol(mbTrans342)
    argvalue0 := rpc.NewTSExecuteStatementReq()
    err346 := argvalue0.Read(context.Background(), jsProt345)
    if err346 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ExecuteUpdateStatement(context.Background(), value0))
    fmt.Print("\n")
    break
  case "fetchResults":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FetchResults requires 1 args")
      flag.Usage()
    }
    arg347 := flag.Arg(1)
    mbTrans348 := thrift.NewTMemoryBufferLen(len(arg347))
    defer mbTrans348.Close()
    _, err349 := mbTrans348.WriteString(arg347)
    if err349 != nil {
      Usage()
      return
    }
    factory350 := thrift.NewTJSONProtocolFactory()
    jsProt351 := factory350.GetProtocol(mbTrans348)
    argvalue0 := rpc.NewTSFetchResultsReq()
    err352 := argvalue0.Read(context.Background(), jsProt351)
    if err352 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.FetchResults(context.Background(), value0))
    fmt.Print("\n")
    break
  case "fetchMetadata":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FetchMetadata requires 1 args")
      flag.Usage()
    }
    arg353 := flag.Arg(1)
    mbTrans354 := thrift.NewTMemoryBufferLen(len(arg353))
    defer mbTrans354.Close()
    _, err355 := mbTrans354.WriteString(arg353)
    if err355 != nil {
      Usage()
      return
    }
    factory356 := thrift.NewTJSONProtocolFactory()
    jsProt357 := factory356.GetProtocol(mbTrans354)
    argvalue0 := rpc.NewTSFetchMetadataReq()
    err358 := argvalue0.Read(context.Background(), jsProt357)
    if err358 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.FetchMetadata(context.Background(), value0))
    fmt.Print("\n")
    break
  case "cancelOperation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CancelOperation requires 1 args")
      flag.Usage()
    }
    arg359 := flag.Arg(1)
    mbTrans360 := thrift.NewTMemoryBufferLen(len(arg359))
    defer mbTrans360.Close()
    _, err361 := mbTrans360.WriteString(arg359)
    if err361 != nil {
      Usage()
      return
    }
    factory362 := thrift.NewTJSONProtocolFactory()
    jsProt363 := factory362.GetProtocol(mbTrans360)
    argvalue0 := rpc.NewTSCancelOperationReq()
    err364 := argvalue0.Read(context.Background(), jsProt363)
    if err364 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CancelOperation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "closeOperation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CloseOperation requires 1 args")
      flag.Usage()
    }
    arg365 := flag.Arg(1)
    mbTrans366 := thrift.NewTMemoryBufferLen(len(arg365))
    defer mbTrans366.Close()
    _, err367 := mbTrans366.WriteString(arg365)
    if err367 != nil {
      Usage()
      return
    }
    factory368 := thrift.NewTJSONProtocolFactory()
    jsProt369 := factory368.GetProtocol(mbTrans366)
    argvalue0 := rpc.NewTSCloseOperationReq()
    err370 := argvalue0.Read(context.Background(), jsProt369)
    if err370 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CloseOperation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getTimeZone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTimeZone requires 1 args")
      flag.Usage()
    }
    argvalue0, err371 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err371 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTimeZone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "setTimeZone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetTimeZone requires 1 args")
      flag.Usage()
    }
    arg372 := flag.Arg(1)
    mbTrans373 := thrift.NewTMemoryBufferLen(len(arg372))
    defer mbTrans373.Close()
    _, err374 := mbTrans373.WriteString(arg372)
    if err374 != nil {
      Usage()
      return
    }
    factory375 := thrift.NewTJSONProtocolFactory()
    jsProt376 := factory375.GetProtocol(mbTrans373)
    argvalue0 := rpc.NewTSSetTimeZoneReq()
    err377 := argvalue0.Read(context.Background(), jsProt376)
    if err377 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SetTimeZone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getProperties":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetProperties requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetProperties(context.Background()))
    fmt.Print("\n")
    break
  case "setStorageGroup":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetStorageGroup requires 2 args")
      flag.Usage()
    }
    argvalue0, err378 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err378 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetStorageGroup(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "createTimeseries":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateTimeseries requires 1 args")
      flag.Usage()
    }
    arg380 := flag.Arg(1)
    mbTrans381 := thrift.NewTMemoryBufferLen(len(arg380))
    defer mbTrans381.Close()
    _, err382 := mbTrans381.WriteString(arg380)
    if err382 != nil {
      Usage()
      return
    }
    factory383 := thrift.NewTJSONProtocolFactory()
    jsProt384 := factory383.GetProtocol(mbTrans381)
    argvalue0 := rpc.NewTSCreateTimeseriesReq()
    err385 := argvalue0.Read(context.Background(), jsProt384)
    if err385 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateTimeseries(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createAlignedTimeseries":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateAlignedTimeseries requires 1 args")
      flag.Usage()
    }
    arg386 := flag.Arg(1)
    mbTrans387 := thrift.NewTMemoryBufferLen(len(arg386))
    defer mbTrans387.Close()
    _, err388 := mbTrans387.WriteString(arg386)
    if err388 != nil {
      Usage()
      return
    }
    factory389 := thrift.NewTJSONProtocolFactory()
    jsProt390 := factory389.GetProtocol(mbTrans387)
    argvalue0 := rpc.NewTSCreateAlignedTimeseriesReq()
    err391 := argvalue0.Read(context.Background(), jsProt390)
    if err391 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateAlignedTimeseries(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createMultiTimeseries":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateMultiTimeseries requires 1 args")
      flag.Usage()
    }
    arg392 := flag.Arg(1)
    mbTrans393 := thrift.NewTMemoryBufferLen(len(arg392))
    defer mbTrans393.Close()
    _, err394 := mbTrans393.WriteString(arg392)
    if err394 != nil {
      Usage()
      return
    }
    factory395 := thrift.NewTJSONProtocolFactory()
    jsProt396 := factory395.GetProtocol(mbTrans393)
    argvalue0 := rpc.NewTSCreateMultiTimeseriesReq()
    err397 := argvalue0.Read(context.Background(), jsProt396)
    if err397 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateMultiTimeseries(context.Background(), value0))
    fmt.Print("\n")
    break
  case "deleteTimeseries":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DeleteTimeseries requires 2 args")
      flag.Usage()
    }
    argvalue0, err398 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err398 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg399 := flag.Arg(2)
    mbTrans400 := thrift.NewTMemoryBufferLen(len(arg399))
    defer mbTrans400.Close()
    _, err401 := mbTrans400.WriteString(arg399)
    if err401 != nil { 
      Usage()
      return
    }
    factory402 := thrift.NewTJSONProtocolFactory()
    jsProt403 := factory402.GetProtocol(mbTrans400)
    containerStruct1 := rpc.NewTSIServiceDeleteTimeseriesArgs()
    err404 := containerStruct1.ReadField2(context.Background(), jsProt403)
    if err404 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Path
    value1 := argvalue1
    fmt.Print(client.DeleteTimeseries(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deleteStorageGroups":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DeleteStorageGroups requires 2 args")
      flag.Usage()
    }
    argvalue0, err405 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err405 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg406 := flag.Arg(2)
    mbTrans407 := thrift.NewTMemoryBufferLen(len(arg406))
    defer mbTrans407.Close()
    _, err408 := mbTrans407.WriteString(arg406)
    if err408 != nil { 
      Usage()
      return
    }
    factory409 := thrift.NewTJSONProtocolFactory()
    jsProt410 := factory409.GetProtocol(mbTrans407)
    containerStruct1 := rpc.NewTSIServiceDeleteStorageGroupsArgs()
    err411 := containerStruct1.ReadField2(context.Background(), jsProt410)
    if err411 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.StorageGroup
    value1 := argvalue1
    fmt.Print(client.DeleteStorageGroups(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "insertRecord":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InsertRecord requires 1 args")
      flag.Usage()
    }
    arg412 := flag.Arg(1)
    mbTrans413 := thrift.NewTMemoryBufferLen(len(arg412))
    defer mbTrans413.Close()
    _, err414 := mbTrans413.WriteString(arg412)
    if err414 != nil {
      Usage()
      return
    }
    factory415 := thrift.NewTJSONProtocolFactory()
    jsProt416 := factory415.GetProtocol(mbTrans413)
    argvalue0 := rpc.NewTSInsertRecordReq()
    err417 := argvalue0.Read(context.Background(), jsProt416)
    if err417 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.InsertRecord(context.Background(), value0))
    fmt.Print("\n")
    break
  case "insertStringRecord":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InsertStringRecord requires 1 args")
      flag.Usage()
    }
    arg418 := flag.Arg(1)
    mbTrans419 := thrift.NewTMemoryBufferLen(len(arg418))
    defer mbTrans419.Close()
    _, err420 := mbTrans419.WriteString(arg418)
    if err420 != nil {
      Usage()
      return
    }
    factory421 := thrift.NewTJSONProtocolFactory()
    jsProt422 := factory421.GetProtocol(mbTrans419)
    argvalue0 := rpc.NewTSInsertStringRecordReq()
    err423 := argvalue0.Read(context.Background(), jsProt422)
    if err423 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.InsertStringRecord(context.Background(), value0))
    fmt.Print("\n")
    break
  case "insertTablet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InsertTablet requires 1 args")
      flag.Usage()
    }
    arg424 := flag.Arg(1)
    mbTrans425 := thrift.NewTMemoryBufferLen(len(arg424))
    defer mbTrans425.Close()
    _, err426 := mbTrans425.WriteString(arg424)
    if err426 != nil {
      Usage()
      return
    }
    factory427 := thrift.NewTJSONProtocolFactory()
    jsProt428 := factory427.GetProtocol(mbTrans425)
    argvalue0 := rpc.NewTSInsertTabletReq()
    err429 := argvalue0.Read(context.Background(), jsProt428)
    if err429 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.InsertTablet(context.Background(), value0))
    fmt.Print("\n")
    break
  case "insertTablets":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InsertTablets requires 1 args")
      flag.Usage()
    }
    arg430 := flag.Arg(1)
    mbTrans431 := thrift.NewTMemoryBufferLen(len(arg430))
    defer mbTrans431.Close()
    _, err432 := mbTrans431.WriteString(arg430)
    if err432 != nil {
      Usage()
      return
    }
    factory433 := thrift.NewTJSONProtocolFactory()
    jsProt434 := factory433.GetProtocol(mbTrans431)
    argvalue0 := rpc.NewTSInsertTabletsReq()
    err435 := argvalue0.Read(context.Background(), jsProt434)
    if err435 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.InsertTablets(context.Background(), value0))
    fmt.Print("\n")
    break
  case "insertRecords":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InsertRecords requires 1 args")
      flag.Usage()
    }
    arg436 := flag.Arg(1)
    mbTrans437 := thrift.NewTMemoryBufferLen(len(arg436))
    defer mbTrans437.Close()
    _, err438 := mbTrans437.WriteString(arg436)
    if err438 != nil {
      Usage()
      return
    }
    factory439 := thrift.NewTJSONProtocolFactory()
    jsProt440 := factory439.GetProtocol(mbTrans437)
    argvalue0 := rpc.NewTSInsertRecordsReq()
    err441 := argvalue0.Read(context.Background(), jsProt440)
    if err441 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.InsertRecords(context.Background(), value0))
    fmt.Print("\n")
    break
  case "insertRecordsOfOneDevice":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InsertRecordsOfOneDevice requires 1 args")
      flag.Usage()
    }
    arg442 := flag.Arg(1)
    mbTrans443 := thrift.NewTMemoryBufferLen(len(arg442))
    defer mbTrans443.Close()
    _, err444 := mbTrans443.WriteString(arg442)
    if err444 != nil {
      Usage()
      return
    }
    factory445 := thrift.NewTJSONProtocolFactory()
    jsProt446 := factory445.GetProtocol(mbTrans443)
    argvalue0 := rpc.NewTSInsertRecordsOfOneDeviceReq()
    err447 := argvalue0.Read(context.Background(), jsProt446)
    if err447 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.InsertRecordsOfOneDevice(context.Background(), value0))
    fmt.Print("\n")
    break
  case "insertStringRecordsOfOneDevice":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InsertStringRecordsOfOneDevice requires 1 args")
      flag.Usage()
    }
    arg448 := flag.Arg(1)
    mbTrans449 := thrift.NewTMemoryBufferLen(len(arg448))
    defer mbTrans449.Close()
    _, err450 := mbTrans449.WriteString(arg448)
    if err450 != nil {
      Usage()
      return
    }
    factory451 := thrift.NewTJSONProtocolFactory()
    jsProt452 := factory451.GetProtocol(mbTrans449)
    argvalue0 := rpc.NewTSInsertStringRecordsOfOneDeviceReq()
    err453 := argvalue0.Read(context.Background(), jsProt452)
    if err453 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.InsertStringRecordsOfOneDevice(context.Background(), value0))
    fmt.Print("\n")
    break
  case "insertStringRecords":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InsertStringRecords requires 1 args")
      flag.Usage()
    }
    arg454 := flag.Arg(1)
    mbTrans455 := thrift.NewTMemoryBufferLen(len(arg454))
    defer mbTrans455.Close()
    _, err456 := mbTrans455.WriteString(arg454)
    if err456 != nil {
      Usage()
      return
    }
    factory457 := thrift.NewTJSONProtocolFactory()
    jsProt458 := factory457.GetProtocol(mbTrans455)
    argvalue0 := rpc.NewTSInsertStringRecordsReq()
    err459 := argvalue0.Read(context.Background(), jsProt458)
    if err459 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.InsertStringRecords(context.Background(), value0))
    fmt.Print("\n")
    break
  case "testInsertTablet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "TestInsertTablet requires 1 args")
      flag.Usage()
    }
    arg460 := flag.Arg(1)
    mbTrans461 := thrift.NewTMemoryBufferLen(len(arg460))
    defer mbTrans461.Close()
    _, err462 := mbTrans461.WriteString(arg460)
    if err462 != nil {
      Usage()
      return
    }
    factory463 := thrift.NewTJSONProtocolFactory()
    jsProt464 := factory463.GetProtocol(mbTrans461)
    argvalue0 := rpc.NewTSInsertTabletReq()
    err465 := argvalue0.Read(context.Background(), jsProt464)
    if err465 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.TestInsertTablet(context.Background(), value0))
    fmt.Print("\n")
    break
  case "testInsertTablets":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "TestInsertTablets requires 1 args")
      flag.Usage()
    }
    arg466 := flag.Arg(1)
    mbTrans467 := thrift.NewTMemoryBufferLen(len(arg466))
    defer mbTrans467.Close()
    _, err468 := mbTrans467.WriteString(arg466)
    if err468 != nil {
      Usage()
      return
    }
    factory469 := thrift.NewTJSONProtocolFactory()
    jsProt470 := factory469.GetProtocol(mbTrans467)
    argvalue0 := rpc.NewTSInsertTabletsReq()
    err471 := argvalue0.Read(context.Background(), jsProt470)
    if err471 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.TestInsertTablets(context.Background(), value0))
    fmt.Print("\n")
    break
  case "testInsertRecord":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "TestInsertRecord requires 1 args")
      flag.Usage()
    }
    arg472 := flag.Arg(1)
    mbTrans473 := thrift.NewTMemoryBufferLen(len(arg472))
    defer mbTrans473.Close()
    _, err474 := mbTrans473.WriteString(arg472)
    if err474 != nil {
      Usage()
      return
    }
    factory475 := thrift.NewTJSONProtocolFactory()
    jsProt476 := factory475.GetProtocol(mbTrans473)
    argvalue0 := rpc.NewTSInsertRecordReq()
    err477 := argvalue0.Read(context.Background(), jsProt476)
    if err477 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.TestInsertRecord(context.Background(), value0))
    fmt.Print("\n")
    break
  case "testInsertStringRecord":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "TestInsertStringRecord requires 1 args")
      flag.Usage()
    }
    arg478 := flag.Arg(1)
    mbTrans479 := thrift.NewTMemoryBufferLen(len(arg478))
    defer mbTrans479.Close()
    _, err480 := mbTrans479.WriteString(arg478)
    if err480 != nil {
      Usage()
      return
    }
    factory481 := thrift.NewTJSONProtocolFactory()
    jsProt482 := factory481.GetProtocol(mbTrans479)
    argvalue0 := rpc.NewTSInsertStringRecordReq()
    err483 := argvalue0.Read(context.Background(), jsProt482)
    if err483 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.TestInsertStringRecord(context.Background(), value0))
    fmt.Print("\n")
    break
  case "testInsertRecords":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "TestInsertRecords requires 1 args")
      flag.Usage()
    }
    arg484 := flag.Arg(1)
    mbTrans485 := thrift.NewTMemoryBufferLen(len(arg484))
    defer mbTrans485.Close()
    _, err486 := mbTrans485.WriteString(arg484)
    if err486 != nil {
      Usage()
      return
    }
    factory487 := thrift.NewTJSONProtocolFactory()
    jsProt488 := factory487.GetProtocol(mbTrans485)
    argvalue0 := rpc.NewTSInsertRecordsReq()
    err489 := argvalue0.Read(context.Background(), jsProt488)
    if err489 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.TestInsertRecords(context.Background(), value0))
    fmt.Print("\n")
    break
  case "testInsertRecordsOfOneDevice":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "TestInsertRecordsOfOneDevice requires 1 args")
      flag.Usage()
    }
    arg490 := flag.Arg(1)
    mbTrans491 := thrift.NewTMemoryBufferLen(len(arg490))
    defer mbTrans491.Close()
    _, err492 := mbTrans491.WriteString(arg490)
    if err492 != nil {
      Usage()
      return
    }
    factory493 := thrift.NewTJSONProtocolFactory()
    jsProt494 := factory493.GetProtocol(mbTrans491)
    argvalue0 := rpc.NewTSInsertRecordsOfOneDeviceReq()
    err495 := argvalue0.Read(context.Background(), jsProt494)
    if err495 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.TestInsertRecordsOfOneDevice(context.Background(), value0))
    fmt.Print("\n")
    break
  case "testInsertStringRecords":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "TestInsertStringRecords requires 1 args")
      flag.Usage()
    }
    arg496 := flag.Arg(1)
    mbTrans497 := thrift.NewTMemoryBufferLen(len(arg496))
    defer mbTrans497.Close()
    _, err498 := mbTrans497.WriteString(arg496)
    if err498 != nil {
      Usage()
      return
    }
    factory499 := thrift.NewTJSONProtocolFactory()
    jsProt500 := factory499.GetProtocol(mbTrans497)
    argvalue0 := rpc.NewTSInsertStringRecordsReq()
    err501 := argvalue0.Read(context.Background(), jsProt500)
    if err501 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.TestInsertStringRecords(context.Background(), value0))
    fmt.Print("\n")
    break
  case "deleteData":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteData requires 1 args")
      flag.Usage()
    }
    arg502 := flag.Arg(1)
    mbTrans503 := thrift.NewTMemoryBufferLen(len(arg502))
    defer mbTrans503.Close()
    _, err504 := mbTrans503.WriteString(arg502)
    if err504 != nil {
      Usage()
      return
    }
    factory505 := thrift.NewTJSONProtocolFactory()
    jsProt506 := factory505.GetProtocol(mbTrans503)
    argvalue0 := rpc.NewTSDeleteDataReq()
    err507 := argvalue0.Read(context.Background(), jsProt506)
    if err507 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteData(context.Background(), value0))
    fmt.Print("\n")
    break
  case "executeRawDataQuery":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ExecuteRawDataQuery requires 1 args")
      flag.Usage()
    }
    arg508 := flag.Arg(1)
    mbTrans509 := thrift.NewTMemoryBufferLen(len(arg508))
    defer mbTrans509.Close()
    _, err510 := mbTrans509.WriteString(arg508)
    if err510 != nil {
      Usage()
      return
    }
    factory511 := thrift.NewTJSONProtocolFactory()
    jsProt512 := factory511.GetProtocol(mbTrans509)
    argvalue0 := rpc.NewTSRawDataQueryReq()
    err513 := argvalue0.Read(context.Background(), jsProt512)
    if err513 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ExecuteRawDataQuery(context.Background(), value0))
    fmt.Print("\n")
    break
  case "executeLastDataQuery":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ExecuteLastDataQuery requires 1 args")
      flag.Usage()
    }
    arg514 := flag.Arg(1)
    mbTrans515 := thrift.NewTMemoryBufferLen(len(arg514))
    defer mbTrans515.Close()
    _, err516 := mbTrans515.WriteString(arg514)
    if err516 != nil {
      Usage()
      return
    }
    factory517 := thrift.NewTJSONProtocolFactory()
    jsProt518 := factory517.GetProtocol(mbTrans515)
    argvalue0 := rpc.NewTSLastDataQueryReq()
    err519 := argvalue0.Read(context.Background(), jsProt518)
    if err519 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ExecuteLastDataQuery(context.Background(), value0))
    fmt.Print("\n")
    break
  case "requestStatementId":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RequestStatementId requires 1 args")
      flag.Usage()
    }
    argvalue0, err520 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err520 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RequestStatementId(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createSchemaTemplate":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateSchemaTemplate requires 1 args")
      flag.Usage()
    }
    arg521 := flag.Arg(1)
    mbTrans522 := thrift.NewTMemoryBufferLen(len(arg521))
    defer mbTrans522.Close()
    _, err523 := mbTrans522.WriteString(arg521)
    if err523 != nil {
      Usage()
      return
    }
    factory524 := thrift.NewTJSONProtocolFactory()
    jsProt525 := factory524.GetProtocol(mbTrans522)
    argvalue0 := rpc.NewTSCreateSchemaTemplateReq()
    err526 := argvalue0.Read(context.Background(), jsProt525)
    if err526 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateSchemaTemplate(context.Background(), value0))
    fmt.Print("\n")
    break
  case "appendSchemaTemplate":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AppendSchemaTemplate requires 1 args")
      flag.Usage()
    }
    arg527 := flag.Arg(1)
    mbTrans528 := thrift.NewTMemoryBufferLen(len(arg527))
    defer mbTrans528.Close()
    _, err529 := mbTrans528.WriteString(arg527)
    if err529 != nil {
      Usage()
      return
    }
    factory530 := thrift.NewTJSONProtocolFactory()
    jsProt531 := factory530.GetProtocol(mbTrans528)
    argvalue0 := rpc.NewTSAppendSchemaTemplateReq()
    err532 := argvalue0.Read(context.Background(), jsProt531)
    if err532 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AppendSchemaTemplate(context.Background(), value0))
    fmt.Print("\n")
    break
  case "pruneSchemaTemplate":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PruneSchemaTemplate requires 1 args")
      flag.Usage()
    }
    arg533 := flag.Arg(1)
    mbTrans534 := thrift.NewTMemoryBufferLen(len(arg533))
    defer mbTrans534.Close()
    _, err535 := mbTrans534.WriteString(arg533)
    if err535 != nil {
      Usage()
      return
    }
    factory536 := thrift.NewTJSONProtocolFactory()
    jsProt537 := factory536.GetProtocol(mbTrans534)
    argvalue0 := rpc.NewTSPruneSchemaTemplateReq()
    err538 := argvalue0.Read(context.Background(), jsProt537)
    if err538 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PruneSchemaTemplate(context.Background(), value0))
    fmt.Print("\n")
    break
  case "querySchemaTemplate":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "QuerySchemaTemplate requires 1 args")
      flag.Usage()
    }
    arg539 := flag.Arg(1)
    mbTrans540 := thrift.NewTMemoryBufferLen(len(arg539))
    defer mbTrans540.Close()
    _, err541 := mbTrans540.WriteString(arg539)
    if err541 != nil {
      Usage()
      return
    }
    factory542 := thrift.NewTJSONProtocolFactory()
    jsProt543 := factory542.GetProtocol(mbTrans540)
    argvalue0 := rpc.NewTSQueryTemplateReq()
    err544 := argvalue0.Read(context.Background(), jsProt543)
    if err544 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.QuerySchemaTemplate(context.Background(), value0))
    fmt.Print("\n")
    break
  case "setSchemaTemplate":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetSchemaTemplate requires 1 args")
      flag.Usage()
    }
    arg545 := flag.Arg(1)
    mbTrans546 := thrift.NewTMemoryBufferLen(len(arg545))
    defer mbTrans546.Close()
    _, err547 := mbTrans546.WriteString(arg545)
    if err547 != nil {
      Usage()
      return
    }
    factory548 := thrift.NewTJSONProtocolFactory()
    jsProt549 := factory548.GetProtocol(mbTrans546)
    argvalue0 := rpc.NewTSSetSchemaTemplateReq()
    err550 := argvalue0.Read(context.Background(), jsProt549)
    if err550 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SetSchemaTemplate(context.Background(), value0))
    fmt.Print("\n")
    break
  case "unsetSchemaTemplate":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UnsetSchemaTemplate requires 1 args")
      flag.Usage()
    }
    arg551 := flag.Arg(1)
    mbTrans552 := thrift.NewTMemoryBufferLen(len(arg551))
    defer mbTrans552.Close()
    _, err553 := mbTrans552.WriteString(arg551)
    if err553 != nil {
      Usage()
      return
    }
    factory554 := thrift.NewTJSONProtocolFactory()
    jsProt555 := factory554.GetProtocol(mbTrans552)
    argvalue0 := rpc.NewTSUnsetSchemaTemplateReq()
    err556 := argvalue0.Read(context.Background(), jsProt555)
    if err556 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UnsetSchemaTemplate(context.Background(), value0))
    fmt.Print("\n")
    break
  case "setUsingTemplate":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetUsingTemplate requires 1 args")
      flag.Usage()
    }
    arg557 := flag.Arg(1)
    mbTrans558 := thrift.NewTMemoryBufferLen(len(arg557))
    defer mbTrans558.Close()
    _, err559 := mbTrans558.WriteString(arg557)
    if err559 != nil {
      Usage()
      return
    }
    factory560 := thrift.NewTJSONProtocolFactory()
    jsProt561 := factory560.GetProtocol(mbTrans558)
    argvalue0 := rpc.NewTSSetUsingTemplateReq()
    err562 := argvalue0.Read(context.Background(), jsProt561)
    if err562 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SetUsingTemplate(context.Background(), value0))
    fmt.Print("\n")
    break
  case "unsetUsingTemplate":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UnsetUsingTemplate requires 3 args")
      flag.Usage()
    }
    argvalue0, err563 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err563 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UnsetUsingTemplate(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "dropSchemaTemplate":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropSchemaTemplate requires 1 args")
      flag.Usage()
    }
    arg566 := flag.Arg(1)
    mbTrans567 := thrift.NewTMemoryBufferLen(len(arg566))
    defer mbTrans567.Close()
    _, err568 := mbTrans567.WriteString(arg566)
    if err568 != nil {
      Usage()
      return
    }
    factory569 := thrift.NewTJSONProtocolFactory()
    jsProt570 := factory569.GetProtocol(mbTrans567)
    argvalue0 := rpc.NewTSDropSchemaTemplateReq()
    err571 := argvalue0.Read(context.Background(), jsProt570)
    if err571 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropSchemaTemplate(context.Background(), value0))
    fmt.Print("\n")
    break
  case "executeOperationSync":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ExecuteOperationSync requires 1 args")
      flag.Usage()
    }
    arg572 := flag.Arg(1)
    mbTrans573 := thrift.NewTMemoryBufferLen(len(arg572))
    defer mbTrans573.Close()
    _, err574 := mbTrans573.WriteString(arg572)
    if err574 != nil {
      Usage()
      return
    }
    factory575 := thrift.NewTJSONProtocolFactory()
    jsProt576 := factory575.GetProtocol(mbTrans573)
    argvalue0 := rpc.NewTSOperationSyncWriteReq()
    err577 := argvalue0.Read(context.Background(), jsProt576)
    if err577 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ExecuteOperationSync(context.Background(), value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
